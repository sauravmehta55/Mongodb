//Creating database
use mongo-practice

db.createCollection('movies')

//INSERT INTO MOVIES COLLECTION
db.movies.insertMany([{"title": "Fight club" , "writer": "chuck palahniuko" , "year": "1999" , "actors": ["Brad Pitt" , "Edward Norton"]} , {"title": "pulp fiction" , "writer": "quentin tarantino" , "year": "1994" , "actors": ["john travolta" , "uma thurman"]} , {"title": "inglorius bastards" , "writer": "quentin tarantino" , "year": "2009" , "actors": ["brad pitt" , "diane kruger" , "eli roth"]} , {"title": "the hobbit: an unexpected story" , "writer": "j.r.r. tolkein" , "year": "2012", "franchise": "the hobbit"}, {"title": "the hobbit: the desolation of smaug" , "writer": "j.r.r. tolkein" , "year": "2013" , "franchise": "the hobbit"}, {"title": "the hobbit: the battle of the five armies", "writer": "j.r.r. tolkein", "year": "2012", "franchise": "the hobbit", "synopsis": "bilbo and company are forced to engage in a war against an array of combatants and keep the lonely mountain from falling into the hands of a rising darkness"}, {"title": "pee wee herman's big adventure"}, {"title": "avatar"}])

QUERY/FIND DOCUMENTS

1. get all documents
   db.movies.find()

2. get all documents with writer set to "Quentin Tarantino"
   db.movies.find({writer:"Quentin Tarantino"})

3. get all documents where actors include "Brad Pitt"
   db.movies.find({actors:"Brad Pitt"})

4. get all documents with franchise set to "The Hobbit"
   db.movies.find({franchise:"The Hobbit"})

5. get all movies released in the 90s
   db.movies.find({year : {$gt : 1990 , $lt :2000}}) 

6. get all movies released before the year 2000 or after 2010
   db.movies.find({$or: [{year: {$lt: 2000}}, {year: {$gt: 2010}}]})

UPDATE DOCUMENTS

1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."

   db.movies.update({title:"The Hobbit: An Unexpected Journey"},{ $set: { "synopsis": "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." }})

2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
 
   db.movies.update({title:"The Hobbit: The Desolation of Smaug"},{ $set: { "synopsis": "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }})

3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
   db.movies.update({title:"Pulp Fiction"},{$push:{actors:"Samuel L. Jackson"}} )

TEXT SEARCH

//CREATING INDEX FOR TEXT SEARCH
db.movies.createIndex({synopsis:"text"})

1. find all movies that have a synopsis that contains the word "Bilbo"

   db.movies.find({$text: {$search: "Bilbo"}})

2. find all movies that have a synopsis that contains the word "Gandalf"

   db.movies.find({$text: {$search: "Gandalf"}})

3. find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"

   db.movies.find({$text: {$search: "Bilbo -Gandalf"}})

4. find all movies that have a synopsis that contains the word "dwarves" or "hobbit"

   db.movies.find({$text: {$search: "dwarves hobbit"}})

5. find all movies that have a synopsis that contains the word "gold" and "dragon"

   db.movies.find({$text: {$search: "gold dragon"}})

DELETE DOCUMENTS

1.  delete the movie "Pee Wee Herman's Big Adventure"
    db.movies.remove({title:"Pee Wee Herman's Big Adventure"});

2.  delete the movie "Avatar"
    db.movies.remove({title:"Avatar"})

RELATIONSHIPS

//Insert into users collection
db.users.insertMany([
{
username: "GoodGuyGreg",
first_name: "Good Guy",
last_name: "Greg"
},
{
username: "ScumbagSteve",
full_name: {
first: "Scumbag",
last: "Steve"
}
}
]);

//Insert into posts collection
db.posts.insertMany([
{
username: "GoodGuyGreg",
title: "Passes out at party",
body: "Wakes up early and cleans house"
},
{
username: "GoodGuyGreg",
title: "Steals your identity",
body: "Raises your credit score"
},
{
username: "GoodGuyGreg",
title: "Reports a bug in your code",
body: "Sends you a Pull Request"
},
{
username: "ScumbagSteve",
title: "Borrows something",
body: "Sells it"
},
{
username: "ScumbagSteve",
title: "Borrows everything",
body: "The end"
},
{
username: "ScumbagSteve",
title: "Forks your repo on github",
body: "Sets to private"
}
]);

//Insert into comments collection
db.comments.insertMany([
{
username: "GoodGuyGreg",
comment: "Hope you got a good deal!",
post: "Borrows Something"
},
{
username: "GoodGuyGreg",
comment: "Don't violate the licensing agreement!",
post: "Borrows Something"
},
{
username: "GoodGuyGreg",
comment: "Don't violate the licensing agreement!",
post: "forks your repo on github"
},
{
username: "ScumbagSteve",
comment: "It still isn't clean",
post: "Passes out at party"
},
{
username: "ScumbagSteve",
comment: "Denied your PR cause I found a hack",
post: "Reports a bug in your code"
}
]);

QUERYING RELATED COLLECTIONS

1. find all users
   db.users.find()
 
2. find all posts
   db.posts.find()


3. find all posts that was authored by "GoodGuyGreg"
   db.posts.find({username:"GoodGuyGreg"})


4. find all posts that was authored by "ScumbagSteve"
   db.posts.find({username:"ScumbagSteve"})


5. find all comments
   db.comments.find()

6. find all comments that was authored by "GoodGuyGreg"
   db.comments.find({username:"GoodGuyGreg"})

7. find all comments that was authored by "ScumbagSteve"
   db.comments.find({username:"ScumbagSteve"})

8. find all comments belonging to the post "Reports a bug in your code"
   db.posts.aggregate([{$match: { title: 'Reports a bug in your code' }},{$lookup: {from: 'comments',localField: '_id',foreignField: 'post',as: 'comments'}}])
